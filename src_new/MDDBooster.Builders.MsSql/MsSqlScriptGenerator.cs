using MDDBooster.Builders.MsSql.Generators;

namespace MDDBooster.Builders.MsSql;

/// <summary>
/// Generates complete SQL scripts for a given MDDDocument
/// </summary>
public class MsSqlScriptGenerator
{
    private readonly MDDDocument _document;
    private readonly TableDefinitionGenerator _tableGenerator;
    private readonly IndexDefinitionGenerator _indexGenerator;
    private readonly TriggerDefinitionGenerator _triggerGenerator;
    private readonly ForeignKeyConstraintGenerator _foreignKeyGenerator;
    private readonly string _schemaName;
    private readonly bool _generateTriggers;
    private readonly bool _generateForeignKeys;

    public MsSqlScriptGenerator(
        MDDDocument document,
        bool useSchemaNamespace = true,
        string schemaNameOverride = "dbo",
        bool generateTriggers = false,
        bool generateForeignKeys = true)
    {
        _document = document;
        _schemaName = useSchemaNamespace ? document.BaseDocument.Namespace : schemaNameOverride;
        _generateTriggers = generateTriggers;
        _generateForeignKeys = generateForeignKeys;

        _tableGenerator = new TableDefinitionGenerator(document, _schemaName);
        _indexGenerator = new IndexDefinitionGenerator(document, _schemaName);
        _triggerGenerator = new TriggerDefinitionGenerator(document, _schemaName);
        _foreignKeyGenerator = new ForeignKeyConstraintGenerator(document, _schemaName);

        AppLog.Debug("MsSqlScriptGenerator initialized for namespace: {Namespace}", _document.BaseDocument.Namespace);
    }

    /// <summary>
    /// Generates a complete SQL script including schema, tables, indexes, foreign keys, and triggers
    /// </summary>
    public string GenerateCompleteScript()
    {
        AppLog.Information("Generating complete SQL script for namespace: {Namespace}", _document.BaseDocument.Namespace);

        var sb = new StringBuilder();

        // Add header
        sb.AppendLine("-- SQL Server Script generated by MDDBooster");
        sb.AppendLine($"-- Generated on: {DateTime.Now}");
        sb.AppendLine($"-- Namespace: {_document.BaseDocument.Namespace}");
        sb.AppendLine();

        // Add schema and tables
        AppLog.Debug("Adding schema and tables section to script");
        sb.AppendLine("-- Schema and Tables");
        sb.AppendLine("-- =================");
        sb.AppendLine();
        sb.Append(GenerateSchema());

        // Add foreign key constraints if enabled
        if (_generateForeignKeys)
        {
            AppLog.Debug("Adding foreign key constraints section to script");
            sb.AppendLine("-- Foreign Key Constraints");
            sb.AppendLine("-- =====================");
            sb.AppendLine();
            sb.Append(_foreignKeyGenerator.GenerateAllForeignKeyConstraints());
        }

        // Add triggers if enabled
        if (_generateTriggers)
        {
            AppLog.Debug("Adding triggers section to script");
            sb.AppendLine("-- Triggers");
            sb.AppendLine("-- ========");
            sb.AppendLine();
            sb.Append(_triggerGenerator.GenerateTriggers());
        }

        AppLog.Information("Complete SQL script generation finished");
        return sb.ToString();
    }

    /// <summary>
    /// Generate complete schema SQL including all tables, constraints, and indexes
    /// </summary>
    public string GenerateSchema()
    {
        AppLog.Information("Generating schema for namespace: {Namespace}", _document.BaseDocument.Namespace);
        var sb = new StringBuilder();

        // Add header comment
        sb.AppendLine("-- # Code generated by \"MDD Booster\"; DO NOT EDIT.");

        // Get only non-abstract models
        var nonAbstractModels = _document.Models.Where(m => !m.BaseModel.IsAbstract).ToList();

        // Generate tables for each model
        foreach (var model in nonAbstractModels)
        {
            AppLog.Debug("Generating table definition for model: {ModelName}", model.BaseModel.Name);
            sb.Append(_tableGenerator.GenerateTable(model));
            sb.AppendLine();
        }

        // Generate indexes
        foreach (var model in nonAbstractModels)
        {
            var indexes = _indexGenerator.GenerateIndexes(model);
            if (!string.IsNullOrEmpty(indexes))
            {
                AppLog.Debug("Generating indexes for model: {ModelName}", model.BaseModel.Name);
                sb.Append(indexes);
                sb.AppendLine();
            }
        }

        AppLog.Information("Schema generation completed for {Count} tables", nonAbstractModels.Count);
        return sb.ToString();
    }

    /// <summary>
    /// Generate foreign key constraints SQL
    /// </summary>
    public string GenerateForeignKeys()
    {
        AppLog.Information("Generating foreign key constraints");
        return _foreignKeyGenerator.GenerateAllForeignKeyConstraints();
    }

    /// <summary>
    /// Generates SQL scripts for specific functions
    /// </summary>
    public Dictionary<string, string> GenerateScripts()
    {
        AppLog.Information("Generating separate SQL scripts for namespace: {Namespace}", _document.BaseDocument.Namespace);

        var scripts = new Dictionary<string, string>();

        // Schema and tables
        AppLog.Debug("Generating schema script");
        scripts["schema"] = GenerateSchema();

        // Foreign key constraints
        if (_generateForeignKeys)
        {
            AppLog.Debug("Generating foreign keys script");
            scripts["foreignkeys"] = GenerateForeignKeys();
        }

        // Triggers (only if enabled)
        if (_generateTriggers)
        {
            AppLog.Debug("Generating triggers script");
            scripts["triggers"] = _triggerGenerator.GenerateTriggers();
        }

        // Complete script
        AppLog.Debug("Generating complete script");
        scripts["complete"] = GenerateCompleteScript();

        AppLog.Information("Generated {Count} separate SQL scripts", scripts.Count);
        return scripts;
    }
}