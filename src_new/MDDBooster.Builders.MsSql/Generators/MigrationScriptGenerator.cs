using MDDBooster.Builders.MsSql.Helpers;

namespace MDDBooster.Builders.MsSql.Generators;

/// <summary>
/// Generator for migration scripts between two document versions
/// </summary>
public class MigrationScriptGenerator
{
    private readonly MDDDocument _oldDocument;
    private readonly MDDDocument _newDocument;

    public MigrationScriptGenerator(MDDDocument oldDocument, MDDDocument newDocument)
    {
        _oldDocument = oldDocument;
        _newDocument = newDocument;
    }

    /// <summary>
    /// Generate a migration script from old document to new document
    /// </summary>
    public string GenerateMigrationScript()
    {
        AppLog.Information("Generating migration script from {OldNamespace} to {NewNamespace}",
            _oldDocument.BaseDocument.Namespace, _newDocument.BaseDocument.Namespace);

        var sb = new StringBuilder();

        // Add header
        sb.AppendLine("-- SQL Server Migration Script generated by MDDBooster");
        sb.AppendLine($"-- Generated on: {DateTime.Now}");
        sb.AppendLine($"-- From namespace: {_oldDocument.BaseDocument.Namespace}");
        sb.AppendLine($"-- To namespace: {_newDocument.BaseDocument.Namespace}");
        sb.AppendLine();

        // Start transaction
        sb.AppendLine("BEGIN TRANSACTION;");
        sb.AppendLine("GO");
        sb.AppendLine();

        // Generate script for new tables
        GenerateNewTablesScript(sb);

        // Generate script for modified tables
        GenerateModifiedTablesScript(sb);

        // Commit transaction
        sb.AppendLine("COMMIT TRANSACTION;");
        sb.AppendLine("GO");

        AppLog.Information("Migration script generation completed");
        return sb.ToString();
    }

    /// <summary>
    /// Generate script for new tables
    /// </summary>
    private void GenerateNewTablesScript(StringBuilder sb)
    {
        // Find new models
        var oldModelNames = _oldDocument.Models.Select(m => m.BaseModel.Name).ToHashSet();
        var newModels = _newDocument.Models.Where(m => !m.BaseModel.IsAbstract && !oldModelNames.Contains(m.BaseModel.Name)).ToList();

        if (newModels.Any())
        {
            AppLog.Debug("Found {Count} new models to create", newModels.Count);
            sb.AppendLine("-- New tables to create");
            sb.AppendLine("-- ===================");
            sb.AppendLine();

            // Create new schema builder to generate just the new tables
            var tempDoc = new MDDDocument
            {
                BaseDocument = _newDocument.BaseDocument,
                Models = newModels,
                Interfaces = _newDocument.Interfaces,
                Enums = _newDocument.Enums
            };

            var tableGenerator = new TableDefinitionGenerator(tempDoc, _newDocument.BaseDocument.Namespace);
            var indexGenerator = new IndexDefinitionGenerator(tempDoc, _newDocument.BaseDocument.Namespace);

            // Generate tables
            foreach (var model in newModels)
            {
                sb.Append(tableGenerator.GenerateTable(model));
                sb.AppendLine();
            }

            // Generate indexes
            foreach (var model in newModels)
            {
                var indexes = indexGenerator.GenerateIndexes(model);
                if (!string.IsNullOrEmpty(indexes))
                {
                    sb.Append(indexes);
                    sb.AppendLine();
                }
            }
        }
        else
        {
            AppLog.Debug("No new models to create");
        }
    }

    /// <summary>
    /// Generate script for modified tables
    /// </summary>
    private void GenerateModifiedTablesScript(StringBuilder sb)
    {
        // Find existing models with changes
        var existingModelNames = _oldDocument.Models.Where(m => !m.BaseModel.IsAbstract)
            .Select(m => m.BaseModel.Name).ToHashSet();

        var existingModelsWithChanges = _newDocument.Models
            .Where(m => !m.BaseModel.IsAbstract && existingModelNames.Contains(m.BaseModel.Name))
            .ToList();

        AppLog.Debug("Checking {Count} existing models for field changes", existingModelsWithChanges.Count);

        foreach (var newModel in existingModelsWithChanges)
        {
            var oldModel = _oldDocument.Models.First(m => m.BaseModel.Name == newModel.BaseModel.Name);

            // Find new fields
            var oldFieldNames = oldModel.Fields.Select(f => f.BaseField.Name).ToHashSet();
            var newFields = newModel.Fields.Where(f => !oldFieldNames.Contains(f.BaseField.Name)).ToList();

            if (newFields.Any())
            {
                AppLog.Debug("Found {Count} new fields in model {ModelName}", newFields.Count, newModel.BaseModel.Name);
                sb.AppendLine($"-- New fields for table {newModel.BaseModel.Name}");
                sb.AppendLine($"-- {new string('=', 20 + newModel.BaseModel.Name.Length)}");
                sb.AppendLine();

                foreach (var field in newFields)
                {
                    var sqlType = SqlHelpers.GetSqlType(field);
                    var nullableStr = field.BaseField.IsNullable ? "NULL" : "NOT NULL";
                    var defaultStr = !string.IsNullOrEmpty(field.BaseField.DefaultValue)
                        ? $" DEFAULT {SqlHelpers.TransformDefaultValue(field.BaseField.DefaultValue, field.BaseField.Type)}"
                        : "";

                    AppLog.Debug("Adding ALTER TABLE statement for new field {FieldName} in {ModelName}",
                        field.BaseField.Name, newModel.BaseModel.Name);

                    sb.AppendLine($"ALTER TABLE [{_newDocument.BaseDocument.Namespace}].[{newModel.BaseModel.Name}] ADD");
                    sb.AppendLine($"    [{field.BaseField.Name}] {sqlType} {nullableStr}{defaultStr};");
                    sb.AppendLine("GO");
                    sb.AppendLine();
                }
            }

            // Find changed fields
            var commonFields = newModel.Fields
                .Where(nf => oldFieldNames.Contains(nf.BaseField.Name))
                .ToList();

            AppLog.Debug("Checking {Count} common fields in model {ModelName} for changes",
                commonFields.Count, newModel.BaseModel.Name);

            foreach (var newField in commonFields)
            {
                var oldField = oldModel.Fields.First(f => f.BaseField.Name == newField.BaseField.Name);

                // Check for type changes
                if (newField.BaseField.Type != oldField.BaseField.Type ||
                    newField.BaseField.Length != oldField.BaseField.Length ||
                    newField.BaseField.IsNullable != oldField.BaseField.IsNullable)
                {
                    var sqlType = SqlHelpers.GetSqlType(newField);
                    var nullableStr = newField.BaseField.IsNullable ? "NULL" : "NOT NULL";

                    AppLog.Debug("Found changed field {FieldName} in model {ModelName}",
                        newField.BaseField.Name, newModel.BaseModel.Name);

                    sb.AppendLine($"-- Alter field {newField.BaseField.Name} in table {newModel.BaseModel.Name}");
                    sb.AppendLine($"ALTER TABLE [{_newDocument.BaseDocument.Namespace}].[{newModel.BaseModel.Name}] ALTER COLUMN");
                    sb.AppendLine($"    [{newField.BaseField.Name}] {sqlType} {nullableStr};");
                    sb.AppendLine("GO");
                    sb.AppendLine();
                }
            }
        }
    }
}