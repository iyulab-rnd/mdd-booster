using MDDBooster.Builders;
using Microsoft.Extensions.Logging;

namespace MDDBooster.Handlers
{
    public class ModelProjectHandler(ILogger<ModelProjectHandler> logger, Settings.Settings settings)
    {
        private readonly ILogger<ModelProjectHandler> logger = logger;
        private readonly Settings.Settings settings = settings;

        private readonly string[] exceptNames =
        [
            "IEntity", "IIdEntity", "IKeyEntity", "IGuidEntity", "IAtEntity", "IUndeletable" ,
            "IdEntity", "KeyEntity", "GuidEntity"
        ];

        public async Task RunAsync(IModelMeta[] models)
        {
            if (settings.ModelProject == null) return;

            var projPath = Utils.ResolvePath(settings.BasePath, settings.ModelProject.Path);
            if (projPath == null) return;

            var ns = settings.ModelProject.Namespace ?? throw new Exception("required settings, model-ns");
            var basePath = Path.Combine(projPath, "Entity_");
            if (Directory.Exists(basePath)) Directory.Delete(basePath, true);
            Directory.CreateDirectory(basePath);

            foreach (var m in models.OfType<InterfaceMeta>())
            {
                if (exceptNames.Contains(m.Name)) continue;
                logger.LogInformation("Build interface class: {Name}", m.Name);

                var builder = new InterfaceBuilder(m);
                builder.Build(ns, basePath);
            }

            foreach (var m in models.OfType<AbstractMeta>())
            {
                if (exceptNames.Contains(m.Name)) continue;
                logger.LogInformation("Build abstract class: {Name}", m.Name);

                var builder = new EntityBuilder(m);
                builder.Build(ns, basePath);
            }

            foreach (var m in models.OfType<TableMeta>())
            {
                if (exceptNames.Contains(m.Name)) continue;
                logger.LogInformation("Build entity class: {Name}", m.Name);

                var builder = new EntityBuilder(m);
                builder.Build(ns, basePath);
            }

            BuildGlobalUsings(projPath);

            await Task.CompletedTask;
        }

        private void BuildGlobalUsings(string basePath)
        {
            var domain = settings.ModelProject.Namespace;
            var filePath = Path.Combine(basePath, $"GlobalUsings_.cs");

            var usings = new List<string>()
            {
                "System.ComponentModel",
                "System.ComponentModel.DataAnnotations",
                "System.ComponentModel.DataAnnotations.Schema",
                "System.Text.Json.Serialization",
                "Iyu.Data",
                "Iyu.Entity",
                "Iyu.OData",
                $"{domain}.Entity",
            };

            if (settings.ModelProject.Usings != null)
            {
                usings.AddRange(settings.ModelProject.Usings);
            }

            var usingLines = usings.Distinct().Select(p => $"global using {p};").ToList();

            var usingsText = string.Join(Environment.NewLine, usingLines);
            var code = $@"// Code generated by ""MDD Booster""; DO NOT EDIT.

{usingsText}";
            Functions.FileWrite(filePath, code);
        }
    }
}
