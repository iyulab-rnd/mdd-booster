using MDDBooster.Builders;
using Microsoft.Extensions.Logging;
using System.Reflection;

namespace MDDBooster.Handlers
{
    public class ServerProjectHandler(ILogger<ServerProjectHandler> logger, Settings.Settings settings)
    {
        private readonly ILogger<ServerProjectHandler> logger = logger;
        private readonly Settings.Settings settings = settings;

        public async Task RunAsync(IModelMeta[] models)
        {
            if (settings.ServerProject == null) return;

            var projPath = Utils.ResolvePath(settings.BasePath, settings.ServerProject.Path);
            if (projPath == null) return;

            // Services
            var basePath = Path.Combine(projPath, "Services_");
            if (Directory.Exists(basePath)) Directory.Delete(basePath, true);
            Directory.CreateDirectory(basePath);

            BuildDataContext(models, 
                settings.ModelProject.Namespace,
                settings.ServerProject.Namespace,
                basePath);

            BuildEntitySet(models,
                settings.ModelProject.Namespace,
                settings.ServerProject.Namespace,
                basePath);

            BuildGraphQL(models, settings);


            // Controllers
            basePath = Path.Combine(projPath, "Controller_");
            if (Directory.Exists(basePath)) Directory.Delete(basePath, true);
            Directory.CreateDirectory(basePath);

            BuildDataController(models,
                settings.ModelProject.Namespace,
                settings.ServerProject.Namespace,
                basePath);


            BuildGlobalUsings(projPath);

            await Task.CompletedTask;
        }

        private void BuildDataContext(IModelMeta[] models, string modelNS, string serverNS, string basePath)
        {
            logger.LogInformation("Build DataContext");
            var builder = new DataContextBuilder(models);
            builder.Build(modelNS, serverNS, basePath);
        }

        private void BuildEntitySet(IModelMeta[] models, string modelNS, string serverNS, string basePath)
        {
            logger.LogInformation("Build EntitySet");
            var builder = new EntitySetBuilder(models);
            builder.Build(modelNS, serverNS, basePath);
        }

        private void BuildDataController(IModelMeta[] models, string modelNS, string serverNS, string basePath)
        {
            logger.LogInformation("Build DataController");
            var builder = new DataControllerBuilder(models);
            builder.Build(modelNS, serverNS, basePath);
        }

        private void BuildGraphQL(IModelMeta[] models, Settings.Settings settings)
        {
            logger.LogInformation("Build GraphQL");
            var builder = new GraphQLBuilder(models, settings);
            builder.Build();
        }

        private void BuildGlobalUsings(string basePath)
            {
            var modelNS = settings.ModelProject.Namespace;
            var serverNS = settings.ServerProject!.Namespace;
            var filePath = Path.Combine(basePath, $"GlobalUsings_.cs");
            var code = $@"// Code generated by ""MDD Booster""; DO NOT EDIT.

global using Microsoft.Extensions.DependencyInjection;
global using Microsoft.EntityFrameworkCore;
global using Microsoft.OData.ModelBuilder;
global using Microsoft.AspNetCore.Http;
global using GraphQL.Types;
global using GraphQL.Resolvers;
global using GraphQL.Instrumentation;
global using SqlKata.Execution;
global using Iyu;
global using Iyu.Data;
global using Iyu.Server.OData.Services;
global using Iyu.Server.OData.Gql;
global using {modelNS}.Entity;
global using {modelNS}.Gql;
global using {serverNS}.Gql.Schemas;
global using {serverNS}.Services;";

            //var usings = settings.ServerProject.Usings?.Select(p => $"global using {p};");
            //if (usings != null)
            //{
            //    var text = Constants.NewLine + string.Join(Constants.NewLine, usings);
            //    code += text;
            //}
            File.WriteAllText(filePath, code);
        }
    }
}
